#!/bin/bash

# The BSD License - https://github.com/wilas/vbkick/blob/master/LICENSE

# Helps civic innovators be better developers
# Inspired by: Vagrant, Openscap, Git, vbkick and more
# Special thanks: Shawn Wells (Red Hat) https://github.com/wilas/vbkick


# Secure bash
# More about options: http://wiki.bash-hackers.org/commands/builtin/set
# treat unset variables as an error
set -u;
# exit when cmd fail (use ERR trap for clean exit)
set -e; set -E;
# fail the entire pipeline if any part of it fails
set -o pipefail;
# debug mode
#set -x;
# http://mywiki.wooledge.org/glob
shopt -s failglob;
# enable POSIX mode
# http://www.gnu.org/software/bash/manual/html_node/Bash-POSIX-Mode.html
set -o posix

. scripts/lib/common
. lib/env # top level environment variables

# Global variables - do not use it in definition file (will be overwrite during program runtime)
# name of global "private" variables should start with underscore
__init_global_state_variables(){
    # 0 - webserver is not running or kill isn't able to stop it
    _webserver_state=0
    # 0 - webserver was killed cleanly or we didn't try kill it yet
    _webserver_kill_cmd_state=0
    # during exporting tmp directory is created
    _tmp_dir=""
    # during creation VM may be temporary in inconsistent state
    # e.g. not all ports mapping, options etc. were setup
    # this flag is used to make sure that vm was created completely or not at all
}

# Display help
#@action
_usage() {
    printf "Description: the GovReady Toolkit\n"
    printf "\n"
    printf "Usage: ${0} <command> [<args>] \n"
    printf "\tversion               Print the version and exit\n"
    printf "\tinit                  Initialize a GovReady directory to track scans\n"

    printf "\tinstall_epel          Install EPEL repo\n"
    printf "\tinstall_openscap      Install openSCAP\n"
    printf "\tinstall_ssg           Install openSCAP & scap-security-guide\n"
    printf "\tinstall_xsltproc      Install libxslt\n"
    
    printf "\timport <file>         Import SCAP content into scap/content/\n"
    printf "\n"

    printf "\tprofiles              Available baselines and profiles\n"
    printf "\tscan <profiles>       Scan system against specified profiles\n"
    printf "\tfix                   Apply most recent fix script\n"
    printf "\n"

    printf "\trule <ruleid>         Test a single rule from xccdf defined in GovReadyfile\n"
    # printf "\t list [<file>] [pass|fail|notselected|unknown|notapplicable|error]\n"
    #printf "\t                     List the rules currently returning particular result\n" 
    printf "\n"
    printf "\tcompare                Compare most recent scan results with previous\n"
    printf "\tcompare <result>       Compare most recent scan results with previous for given result value\n"
    printf "\tcompare <file1> <file2> <result>   Specify files to be compared for result value\n"

    printf "\n"
    printf "\thelp                  Print this help\n"
    printf "\n"
    printf "For help on any individual command run '${0} <command> -h'\n"
    printf "\n"
}

#@action
_context_usage(){
    case "${1}" in
        "test")
            printf "Usage: ${0} test <VALUE> \n"
            printf "Test passing of value\n" ;;
        *) _usage; exit ;;
    esac
}

#@special
_process_3_args() {
    # 2 args are required, 3 may be optional
    if [[ "${3}" == "-h" ]] || [[ "${4:-}" == "-h" ]]; then
        _context_usage "${1}"
        exit 0
    fi
    case "${1}" in
        "compare") _compare "${2}" "${3}";;
        *) _usage; exit ;;
    esac
}
 
#@special
_process_2_args() {
    # 2 args are required, 3 may be optional
    if [[ "${2}" == "-h" ]] || [[ "${3:-}" == "-h" ]]; then
        _context_usage "${1}"
        exit 0
    fi
    _Vm="${2}"
    case "${1}" in
        "test") _test ;;
        "scan") _govoscap "${2}" ;;
        "compare") _compare "${2}";;
        "import") _import "${2}" ;;
        "rule") _govoscap_rules_scan_info "${2}" ;;
        *) _usage; exit ;;
    esac
}

#@special
_process_1_args() {
    # 1 arg is required
    case "${1}" in
        "list") _list_all_vms ;;
        "version") _prog_version ;;
        "init") _govready_init ;;
        "test") _test ;;
        "install_epel") _install_epel ;;
        "install_openscap") _install_openscap ;;
        "install_ssg") _install_ssg ;;
        "install_xsltproc") _install_xsltproc ;;
        "profiles") _govoscap_info ;;
        "scan") _govoscap ;;
        "compare") _compare;;
        "fix") _govoscap_fix ;;
        *) _usage; exit ;;
    esac
}

#@action
_prog_version(){
    printf "${VERSION}\n"
}

__depend_check() {
    local __dep_cmd="${1}"
    local __dep_name="${2}"
    # check whether __dep_name is installed - __dep_cmd command exist
    if ! command -v ${__dep_cmd} >/dev/null 2>&1; then
        __log_error "${__dep_cmd} command doesn't exist - install '${__dep_name}' to continue."
        return 1
    fi
}

__dependencies_check() {
    __depend_check "curl" "curl"
    __depend_check "bash" "bash"
    # __depend_check "openssl" "openssl"
    __depend_check "sed" "sed"
    __depend_check "grep" "grep"
    __depend_check "cut" "coreutils"
    __depend_check "sort" "coreutils"
    __depend_check "tail" "coreutils"
}

# Every action which requires vm settings must use this function to load them.
__load_definition() {
    __load_default_settings
    # definition.cfg is a default definition file
    # loading definition file overwrite default settings
    local __definition_fname="${1:-definition.cfg}"
    if [[ -s "${__definition_fname}" ]]; then
        # In POSIX mode the '.' and 'source' builtins do not search the current directory
        # for the filename argument if it is not found by searching PATH.
        __log_info "Loading \"${__definition_fname}\" definition..."
        if ! . "./${__definition_fname}"; then
            __log_error "Loading failed."
            return 1
        fi
    else
        __log_error "Not existing or empty \"${__definition_fname}\" file in $(pwd). Terminating..."
        return 1
    fi
    # if someone overwrite them in definition file
    __init_global_state_variables
    _vb_version=$(__get_vb_version)
    __check_required_settings
    __autoupdate_files_with_vbox_version
}

# Get virtualbox version
__get_vb_version() {
    local __version=$(VBoxManage --version) # e.g. 4.2.12r84980
    local __pos=$(expr "${__version}" : '[0-9.]\+')
    __version=${__version:0:${__pos}} #e.g. 4.2.12
    printf "${__version}"
}

__is_present() {
    local __pattern="${1:-\"${_Vm}\"}"
    VBoxManage list vms | grep -qw "${__pattern}"
}

__is_running() {
    VBoxManage showvminfo "${_Vm}" | grep -q "State:\s\+running"
}

__is_powered_off() {
    VBoxManage showvminfo "${_Vm}" | grep -q "State:\s\+powered off"
}

__is_paused() {
    VBoxManage showvminfo "${_Vm}" | grep -q "State:\s\+paused"
}

__is_alive() {
    # Alive machine may be in paused|running state
    # Useful to change state: VBoxManage controlvm "${_Vm}" pause|resume
    local __pattern="${1:-\"${_Vm}\"}"
    VBoxManage list runningvms | grep -qw "${__pattern}"
}

# checks whether port is not used by other proc
__check_port_usage() {
    local __port_nr="${1}"
    local __port_message="${2}"
    if __is_port_used ${__port_nr}; then
        __log_error "${__port_nr} port (${__port_message}) is already used by an other process."
        return 1
    fi
}

# Check whether given directory exist
__prepare_path() {
    local __path="${1}"
    local __mkdir_path="${2}"
    # Process special variables in path definition e.g. __path="%VBOXFOLDER%/%NAME%"
    local __location=$(VBoxManage list  systemproperties | grep "Default machine folder" | cut -d':' -f 2 | sed 's/^\s*//g')
    __path=${__path//%SRCPATH%/${boot_file_src_path}}
    __path=${__path//%VBOXFOLDER%/${__location}}
    __path=${__path//%PWD%/$(pwd)}
    # get homedir - $(getent passwd UID) doesn't work for MacOS; $HOME is less portable than ~
    __path=${__path//%HOME%/~}
    __path=${__path//%NAME%/${_Vm}}
    # expand a special variable - e.g. tilde (~) and
    # strips out > characters which could clobber a file during the eval
    __path=$(eval echo "${__path//>}")
    # Creates dir if necessary
    if [[ ${__mkdir_path} -eq 1 ]] && [[ ! -z "${__path}" ]] && [[ ! -d "${__path}" ]]; then
        mkdir -p "${__path}"
    fi
    # Return __path
    printf "${__path}"
}

__curl_safe() {
    local __src="${1}"
    local __dest="${2}"
    local __statuscode=$(curl -Lkfw "%{http_code}\n" "${__src}" -o "${__dest}")
    if [[ ${__statuscode} -ne 200 ]]; then
        __log_error "${__src} status code is ${__statuscode}. Terminating..."
        return 1
    fi
}


#
# GovReady Methods
# 

#@action
_install_epel(){
    if [ ! -f /etc/yum.repos.d/epel.repo ]
    then
        __log_warning "installing epel repo "
        wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
        rpm -Uvh epel-release-6*.rpm
    else 
        __log_ginfo "epel already installed"
    fi
}

#@action\
_install_openscap(){
    # todo : add checks for distribution
    if [ ! -f /etc/yum.repos.d/epel-6-openscap.repo ]
    then
        __log_warning "OpenSCAP repo not installed, installing"
        local NOPKGMANAGER=FALSE

        if which yum &> /dev/null; then
            _install_epel
            __log_govready "installing OpenSCAP on via yum (CentOS/Fedora/RedHat)"
            __log_govready "Running command: yum install openscap openscap-utils -y"
            yum install openscap openscap-utils -y
        elif which apt-get &> /dev/null; then
            __log_ginfo "installing OpenSCAP on via apt-get (Ubuntu)"
            __log_ginfo "attempting libopenscap8 for 14.04, fallback to libopenscap1 for 12.04"
            __log_govready "Running command: apt-get install libopenscap8 -y || apt-get install libopenscap1 -y"
            apt-get install libopenscap8 -y || apt-get install libopenscap1 -y
            # install lynx
            __log_ginfo "install lynx browser"
            __log_govready "Running command: apt-get install lynx -y"
            apt-get install lynx -y
        else
            local NOPKGMANAGER=TRUE
            __log_error "Neither apt-get or yum package manager found. Unable to install software packages."
            exit 1
        fi
    else
        __log_ginfo "OpenSCAP already installed"
    fi
}

#@action
_install_ssg(){
    if ! rpm -qa | grep -q scap-security-guide 
    then
        __log_ginfo "scap-security-guide not installed"
        local NOPKGMANAGER=FALSE

        if which yum &> /dev/null; then
            # install with yum on RHEL/CentOS/Fedora
            _install_epel
            __log_govready "installing scap-security-guide on via yum (CentOS/Fedora/RedHat)"
            __log_govready "Running command: yum install openscap openscap-utils scap-security-guide lynx -y"
            yum install openscap openscap-utils scap-security-guide lynx -y
        elif which apt-get &> /dev/null; then
            __log_ginfo "installing scap-security-guide on via apt-get (Ubuntu)"
            __log_ginfo "attempting libopenscap8 for 14.04, fallback to libopenscap1 for 12.04"
            __log_govready "Running command: apt-get install libopenscap8 -y || apt-get install libopenscap1 -y"
            apt-get install libopenscap8 -y || apt-get install libopenscap1 -y
            # install lynx
            __log_ginfo "install lynx browser"
            __log_govready "Running command: apt-get install lynx -y"
            apt-get install lynx -y
        else
            local NOPKGMANAGER=TRUE
            __log_error "Neither apt-get or yum package manager found. Unable to install software packages."
            exit 1
        fi
    else
        __log_ginfo "scap-security-guide already installed"
    fi
}

#@action
_install_xsltproc() {
#    if ! rpm -qa | grep -q libxslt
#    then
        __log_ginfo "libxslt required for xsltproc"
        local NOPKGMANAGER=FALSE

        if which yum &> /dev/null; then
            # install with yum on RHEL/CentOS/Fedora
            __log_govready "installing libxslt on via yum (CentOS/Fedora/RedHat)"
            __log_govready "Running command: yum install libxslt -y"
            yum install libxslt -y
        elif which apt-get &> /dev/null; then
            __log_ginfo "installing xsltproc on via apt-get (Ubuntu)"
            # __log_ginfo "attempting libopenscap8 for 14.04, fallback to libopenscap1 for 12.04"
            __log_govready "Running command: apt-get install xsltproc -y"
            apt-get install xsltproc -y
        else
            local NOPKGMANAGER=TRUE
            __log_error "Neither apt-get or yum package manager found. Unable to install software packages."
            exit 1
        fi
#    else
#        __log_ginfo "libxslt already installed"
#    fi
}

#@action
_govready_init(){
    __log_info "Initializing GovReady directory"

    __log_info "Creating default GovReadyfile"
    GRF="
# Welcome to the GovReadyfile
#
# Almost every govready command parses and uses the parameters stored in this file.
# Having parameters and values stored in this file simplifies what must be typed at
# the command line and creates shareable artifact supporting Infrastructure as Code.

# GovReady API/syntax version. You should not change this unless you are very certain
API = 0.1.0

# Directory where all scan and eval results will be written
SCANDIR = scans

# Default profile to be used with 'govready scan' command
PROFILE = test

# CPE file to be used with scans. Change this line to use a dictionary for a specific platform.
# Currently, the dictionaly must be on the file system.
# It is recommended new CPE dictionaries be added to the 'scap/content' directory
CPE = /usr/share/xml/scap/ssg/content/ssg-rhel6-cpe-dictionary.xml

# XCCDF file to be used with scans. Change this line to use a different XCCDF.
XCCDF = /usr/share/xml/scap/ssg/content/ssg-rhel6-xccdf.xml

"
    echo "$GRF" > GovReadyfile

    # Parse the GovReadyfile just created and use values to put things in the proper place
    _parse_config
    mkdir -p "${SCANDIR}"

    # Create .govready files
    __log_info "Creating .govready subdirectories and files"
    mkdir -p .govready/scans
    mkdir -p .govready/xml
    _govready_init_scaninfo_file
    _govready_init_scanruleinfo_file
    _govready_init_getruleovaldef_file
    _govready_init_ruleidresult_file
    _govready_init_filterresults_file
    touch .govready/config
    touch .govready/log

    # Create directory for new scap content
    # To Do: Make this a GovReadyfile parameter
    mkdir -p scap/content
}

#@action
_govready_init_scaninfo_file() {

    __log_info "Creating .govready/xml/scaninfo.xsl file"

    # Important to include `!` to avoid sending a halt program signal
    ! read -d '' SIF <<"EOF"
<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="1.1"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:cdf="http://checklists.nist.gov/xccdf/1.1"
    xmlns:exsl="http://exslt.org/common"
    xmlns:db="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:s="http://open-scap.org/"
    exclude-result-prefixes="xsl cdf db s exsl"
    xmlns:ovalres="http://oval.mitre.org/XMLSchema/oval-results-5"
    xmlns:sceres="http://open-scap.org/page/SCE_result_file"
    >

<!--
****************************************************************************************

Copyright: Greg Elin, 2014

This file provides a relatively simple xslt transformation on openscap results.xml file
to show pass / fail numbers. 

usage: $> xsltproc scaninfo.xsl result-file-name.xml

-->

<!--xsl:output method="xml" encoding="UTF-8" indent="yes"/-->    
<xsl:strip-space elements="*"/>
<xsl:output method="text" encoding="utf-8" />

<xsl:template match="/">
    <xsl:apply-templates/>
</xsl:template>

<xsl:template match='cdf:TestResult'>
OpenSCAP NIST Certified SCAP Scanner Results for Profile "<xsl:value-of select='cdf:profile/@idref'/>"

The "<xsl:value-of select='cdf:profile/@idref'/>" profile identifies <xsl:value-of select='count(cdf:rule-result[@severity="high"][cdf:result="pass"] | cdf:rule-result[@severity="high"][cdf:result="fail"] | cdf:rule-result[@severity="high"][cdf:result="error"])' /> high severity controls. OpenSCAP says <xsl:value-of select='count(cdf:rule-result[@severity="high"][cdf:result="pass"])' /> passing and <xsl:value-of select='count(cdf:rule-result[@severity="high"][cdf:result="fail"])' /> failing.
The "<xsl:value-of select='cdf:profile/@idref'/>" profile identifies <xsl:value-of select='count(cdf:rule-result[@severity="medium"][cdf:result="pass"] | cdf:rule-result[@severity="medium"][cdf:result="fail"] | cdf:rule-result[@severity="medium"][cdf:result="error"])' /> medium severity controls. OpenSCAP says <xsl:value-of select='count(cdf:rule-result[@severity="medium"][cdf:result="pass"])' /> passing and <xsl:value-of select='count(cdf:rule-result[@severity="medium"][cdf:result="fail"])' /> failing.
The "<xsl:value-of select='cdf:profile/@idref'/>" profile identifies <xsl:value-of select='count(cdf:rule-result[@severity="low"][cdf:result="pass"] | cdf:rule-result[@severity="low"][cdf:result="fail"] | cdf:rule-result[@severity="low"][cdf:result="error"])' /> low severity controls. OpenSCAP says <xsl:value-of select='count(cdf:rule-result[@severity="low"][cdf:result="pass"])' /> passing and <xsl:value-of select='count(cdf:rule-result[@severity="low"][cdf:result="fail"])' /> failing.
<xsl:text>
</xsl:text>
</xsl:template>

<!-- include to stop leakage from builtin tempaltes -->
<xsl:template match='node()' mode='engine-results'/>
<xsl:template match="text()"/>

</xsl:stylesheet>

EOF

    echo "$SIF" > .govready/xml/scaninfo.xsl

}

#@action
_govready_init_scanruleinfo_file() {

    __log_info "Creating .govready/xml/ruleinfo.xsl file"

    # Important to include `!` to avoid sending a halt program signal
    ! read -d '' SIF <<"EOF"
<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="1.1"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:cdf="http://checklists.nist.gov/xccdf/1.1"
    xmlns:exsl="http://exslt.org/common"
    xmlns:db="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:s="http://open-scap.org/"
    exclude-result-prefixes="xsl cdf db s exsl"
    xmlns:ovalres="http://oval.mitre.org/XMLSchema/oval-results-5"
    xmlns:sceres="http://open-scap.org/page/SCE_result_file"
    >

<!--
****************************************************************************************

Copyright: Greg Elin, 2014

This file provides a relitvely simple xslt transformation on openscap results.xml file
to show information regarding a single rule.

usage: $> xsltproc - -stringparam paramname paramvalue ruleinfo.xsl result-file-name.xml

-->

<xsl:param name="ruleid">notdefined</xsl:param>
<xsl:strip-space elements="*"/>
<xsl:output method="text" encoding="utf-8" />

<xsl:template match="/">
    <xsl:apply-templates/>
</xsl:template>

<xsl:template match="cdf:rule-result">
<xsl:if test="@idref=$ruleid">
Rule "<xsl:value-of select='@idref'/>" (AKA <xsl:value-of select='cdf:ident[@system="http://cce.mitre.org"]'/>) had result "<xsl:value-of select='cdf:result'/>" in most recent scan.
The oval definition is "<xsl:value-of select='(cdf:check[@system="http://oval.mitre.org/XMLSchema/oval-definitions-5"]/cdf:check-content-ref/@name)'/>" in file "<xsl:value-of select='(cdf:check[@system="http://oval.mitre.org/XMLSchema/oval-definitions-5"]/cdf:check-content-ref/@href)'/>" 

Evaluate rule's oval test: govready rule <xsl:value-of select='@idref'/>
OpenSCAP oval eval command: oscap oval eval --id <xsl:value-of select='(cdf:check[@system="http://oval.mitre.org/XMLSchema/oval-definitions-5"]/cdf:check-content-ref/@name)'/> --variables scans/variables.xml /usr/share/xml/scap/ssg/content/<xsl:value-of select='(cdf:check[@system="http://oval.mitre.org/XMLSchema/oval-definitions-5"]/cdf:check-content-ref/@href)'/>

<xsl:text>
</xsl:text>
</xsl:if>
</xsl:template>

<!-- include to stop leakage from builtin tempaltes -->
<xsl:template match='node()' mode='engine-results'/>
<xsl:template match="text()"/>

</xsl:stylesheet>

EOF

    echo "$SIF" > .govready/xml/ruleinfo.xsl

}

#@action
_govready_init_getruleovaldef_file() {

    __log_info "Creating .govready/xml/getruleovaldef.xsl file"

    # Important to include `!` to avoid sending a halt program signal
    ! read -d '' SIF <<"EOF"
<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="1.1"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:cdf="http://checklists.nist.gov/xccdf/1.1"
    xmlns:exsl="http://exslt.org/common"
    xmlns:db="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:s="http://open-scap.org/"
    exclude-result-prefixes="xsl cdf db s exsl"
    xmlns:ovalres="http://oval.mitre.org/XMLSchema/oval-results-5"
    xmlns:sceres="http://open-scap.org/page/SCE_result_file"
    >

<!--
****************************************************************************************

Copyright: Greg Elin, 2014

This file provides a relitvely simple xslt transformation on openscap results.xml file
to show information regarding a single rule.

usage: $> xsltproc - -stringparam paramname paramvalue ruleinfo.xsl result-file-name.xml

-->

<xsl:param name="ruleid">notdefined</xsl:param>
<xsl:strip-space elements="*"/>
<xsl:output method="text" encoding="utf-8" />

<xsl:template match="/">
    <xsl:apply-templates/>
</xsl:template>

<xsl:template match="cdf:rule-result">
<xsl:if test="@idref=$ruleid">
<xsl:value-of select='(cdf:check[@system="http://oval.mitre.org/XMLSchema/oval-definitions-5"]/cdf:check-content-ref/@name)'/>
</xsl:if>
</xsl:template>

<!-- include to stop leakage from builtin tempaltes -->
<xsl:template match='node()' mode='engine-results'/>
<xsl:template match="text()"/>

</xsl:stylesheet>

EOF

    echo "$SIF" > .govready/xml/getruleovaldef.xsl

}

#@action
_parse_config(){
    CONFIGFILE="GovReadyfile"

    # Check if GovReadyFile exists
    if [[ ! -f "$CONFIGFILE" ]]; then
        __log_error "Missing GovReadyfile"
        echo "Missing GovReadyfile. Did you forget to 'govready init'?"
        exit 1
    fi

    # Following sed should find only lines with an `=`, ignore blank lines, and ignore bad code
    eval $(sed '/=/!d;/^ *#/d;s/=/ /;/^ *$/d;' < "$CONFIGFILE" | while read -r key val
    do
        str="$key='$val'"
        echo "$str"
    done)
}

#@action
_test() {
    __log_warning "Test command"
    printf "\n"
}

#@action
_govoscap_info() {
    _parse_config
    # list available profiles
    __log_govready "Profiles are listed in output of information in xccdf file" 
    local oscap_command="oscap info ${XCCDF}"
    __log_govready "Running command: ${oscap_command}"
    eval $oscap_command || __log_govready "..."
}

#@action
_govoscap() {
    # usage: _govoscap("stig-rhel6-server-upstream")
    
    _parse_config
    #__depend_check "libxslt" "xsltrpoc"  # Used to generate quick reports at commandline

    # overwrite values from GovReadyfile with command line values
    if [ "$#" -ne 1 ]; then
        __log_govready "Using profile ${PROFILE}.\n"
        profile="${PROFILE}"
    else
        profile="${1}"
    fi

    # set params
    local suffix="${SUFFIX}"
    local resultsdir="${SCANDIR}"
    local xccdffile="${XCCDF}"

    # build and execute openscap eval
    local scan_command="oscap xccdf eval --oval-results --profile ${profile} --results ${resultsdir}/${profile}-results-$suffix.xml --report ${resultsdir}/${profile}-results-${suffix}.html --cpe ${CPE} ${xccdffile}"
    __log_govready "Scanning system for compliance to profile ${profile}"
    __log_govready "Running command: ${scan_command}"
    eval $scan_command || __log_govready "..."
    
    # make results readable
    chmod go+r $resultsdir/$profile-results-$suffix.html
    chmod go+r $resultsdir/$profile-results-$suffix.xml

    # build and execute openscap fix file generation
    local fix_command="oscap xccdf generate fix --result-id xccdf_org.open-scap_testresult_$profile $resultsdir/$profile-results-$suffix.xml > $resultsdir/$profile-fix-$suffix.sh"
    __log_govready "Running command: \"${fix_command}\""
    eval $fix_command || __log_govready "..."

    # export variables from scan
    # oscap oval eval --variables ssg-rhel6-oval.xml-0.variables-0.xml --id oval:ssg:def:1223 /usr/share/xml/scap/ssg/content/ssg-rhel6-oval.xml
    local export_command="oscap xccdf export-oval-variables --profile ${profile} --cpe ${CPE} ${xccdffile}"
    __log_govready "Running command: \"${export_command}\""
    eval $export_command || __log_govready "..."
    # mv exported variables file
    local bash_command="mv ssg-rhel6-oval.xml-0.variables-0.xml $resultsdir/${profile}-variables-$suffix.xml"
    __log_govready "Running command: \"${bash_command}\""
    eval $bash_command || __log_govready "..."

    # update govready softlinks
    ln -sf $profile-results-$suffix.xml $resultsdir/$profile-results.xml
    ln -sf $profile-results-$suffix.html $resultsdir/$profile-results.html
    ln -sf $profile-fix-$suffix.sh $resultsdir/$profile-fix.sh
    ln -sf $profile-variables-$suffix.xml $resultsdir/$profile-variables.xml
    # set results-previous softlinks if they exist
    [ -f $resultsdir/results.xml ] && ln -sf $(readlink $resultsdir/results.xml) $resultsdir/results-previous.xml || __log_govready "..."
    [ -f $resultsdir/results.html ] && ln -sf $(readlink $resultsdir/results.html) $resultsdir/results-previous.html || __log_govready "..."
    [ -f $resultsdir/fix.sh ] && ln -sf $(readlink $resultsdir/fix.sh) $resultsdir/fix-previous.sh || __log_govready "..."
    [ -f $resultsdir/variables.xml ] && ln -sf $(readlink $resultsdir/variables.xml) $resultsdir/variables-previous.xml || __log_govready "..."
    # set results softlinks
    ln -sf $profile-results-$suffix.xml $resultsdir/results.xml
    ln -sf $profile-results-$suffix.html $resultsdir/results.html
    ln -sf $profile-fix-$suffix.sh $resultsdir/fix.sh
    ln -sf $profile-variables-$suffix.xml $resultsdir/variables.xml

    # build and execute govready commndline quick report
    local gov_command="xsltproc .govready/xml/scaninfo.xsl $resultsdir/$profile-results-$suffix.xml"
    __log_govready "Printing quickie report..."
    __log_govready "Running command: \"${gov_command}\""
    eval $gov_command || __log_govready "..."

    # send govready hint to commandline
    printf "View detailed HTML report: lynx $resultsdir/$profile-results-$suffix.html\n"
    printf "Run auto-generated fix file: govready fix \n\n"
    
}

#@action
_govoscap_fix() {
    # Function uses symbolic link to run the most recently generated fix script

    # Todo: enable passing of specific fix script target
    _parse_config
    #__depend_check "libxslt" "xsltrpoc"  # Used to generate quick reports at commandline

    # set params
    local resultsdir="${SCANDIR}"
    local fixfile="${resultsdir}/$(readlink scans/fix.sh)"

    # graceful error if fix file does not exist
    if [ ! -f $fixfile ]
    then
        __log_warning "No fix file yet exists. "
        printf "No fix file exists. Have you run a 'govready scan' yet?\n"
    else
        # execute most recent fix file
        __log_govready "executing most recent fix file: ${fixfile}"
        bash $fixfile
    fi
}

_govoscap_rules_scan_info() {
    # Provide feedback on a current scan
    _parse_config
    # Expects a scan result to be provided
    ruleid=${1}
    __log_govready "Checking scan results for rule ${ruleid} to scap/content"

    # If no scan result provided, return error and end processing
    local bash__command="xsltproc --stringparam ruleid ${ruleid} .govready/xml/ruleinfo.xsl ${SCANDIR}/results.xml"
    __log_govready "Running command: \"${bash__command}\""
    eval $bash__command || __log_govready "..."

    # build and execute oval eval for a rule id
    # get rule oval def
    ruleid_ovaldef=$(xsltproc --stringparam ruleid ${ruleid} .govready/xml/getruleovaldef.xsl scans/results.xml)
    local oscap__command="oscap oval eval --id ${ruleid_ovaldef} --variables scans/variables.xml ${SSGCONTENTDIR}/ssg-rhel6-oval.xml"
    __log_govready "Running command: \"${oscap__command}\""
    eval $oscap__command || __log_govready "..."

}

#@action
_compare() {

    _parse_config

    local __args_num=$#
    if [[ ${__args_num} -eq 0 ]]; then
        # compare results.xml to results-previous.xml
        newresults="${SCANDIR}/results.xml"
        oldresults="${SCANDIR}/results-previous.xml"
        result="pass"
    elif [[ ${__args_num} -eq 1 ]]; then
        # compare results.xml to results-previous.xml for passed result
        newresults="${SCANDIR}/results.xml"
        oldresults="${SCANDIR}/results-previous.xml"
        result="pass"
        if [[ $1 = "fail" || $1 = "pass" || $1 = "error" || $1 = "unknown" || $1 = "notapplicable" || $1 = "notselected" ]]; then
            result=$1
        else
            __log_error "govready compare ${1} is incorrect. Did you mean 'govready compare pass' or 'govready file1 file2 pass?"
            exit 1
        fi
    elif [[ ${__args_num} -eq 2 ]]; then
        newresults=$1
        oldresults=$2
        #result="pass"
        result="notdefined"
    elif [[ ${__args_num} -eq 3 ]]; then
        newresults=$1
        oldresults=$2
        if [[ $3 = "fail" || $3 = "pass" || $3 = "error" || $3 = "unknown" || $3 = "notapplicable" || $3 = "notselected" ]]; then
            result=$3
        else
            __log_error "govready compare ${3} is incorrect. Did you mean 'govready compare pass' or 'govready file1 file2 pass?"
            exit 1
        fi
    fi

    # Set location of xsl files
    # FILTERRESULTSFILE=".govready/xml/filterresults.xsl"
    # RULEIDRESULTFILE=".govready/xml/ruleidresult.xsl"

    cmd="xsltproc --stringparam result $result $FILTERRESULTSFILE $newresults"
    echo "command: $cmd"
    rules=$(eval $cmd)

    printf "\nComparing $result results...\nA: $newresults  vs  B: $oldresults\n\n"

    for ruleid in $rules; do
        # get result for a ruleid from new results
        cmd_newresults='xsltproc --stringparam ruleid "${ruleid}" $RULEIDRESULTFILE $newresults'
        newtestresult=$(eval $cmd_newresults)

        # get result for a ruleid from old results
        cmd_oldresults='xsltproc --stringparam ruleid "${ruleid}" $RULEIDRESULTFILE $oldresults'
        oldtestresult=$(eval $cmd_oldresults)

        # print out comparison
        if [ $newtestresult = "pass" ]; then
            printf "A: ${_GREEN}$newtestresult${_NORMAL}  "
        else
            printf "A: ${_RED}$newtestresult${_NORMAL}  "
        fi

        if [ $oldtestresult = "pass" ]; then
            printf "B: ${_GREEN}$oldtestresult${_NORMAL}  "
        else
            printf "B: ${_RED}$oldtestresult${_NORMAL}  "
        fi

        printf "rule = $ruleid\n"


        #if [ $oldtestresult != $newtestresult ]; then
        #   printf "A: ${newtestresult} where B: ${oldtestresult} for rule: $ruleid"
        #fi
    done
}

#@action
_import() {
    __log_govready "Importing ${1} to scap/content"
    filename=$(basename "${1}")
    wget --no-check-certificate "${1}" --output-document "scap/content/${filename}"
}

# (signals and error handler) - cleaning after ctr-c, etc.
#@special
_clean_up() {
    __log_info "Signal handler - cleanup before exiting..."
    # run _on_exit function to make real cleaning
    exit 1
}

#@special
_on_exit(){
    # this is a finally block - exec always on exit
    # if [[ ${_webserver_kill_cmd_state} -eq 0 ]]; then
    #     # stop webserver (only if __stop_web_server function didn't fail previuosly)
    #     __stop_web_server
    # else
    #     # previuosly executed __stop_web_server function fail in killing $_web_pid
    #     __log_warning "problem with killing webserver (proc ${_web_pid}). Kill process manually."
    # fi
    # clean _tmp_dir if exist
    if [[ -d ${_tmp_dir} ]]; then
        rm -rf ${_tmp_dir}
    fi
    # help recover some changes made on VM during exporting
    #__recover_vm_state
}

#@special
_main() {
    local __args_num=$#
    __init_global_state_variables
    if [[ ${__args_num} -eq 1 ]]; then
        # check whether we have everything to start with govready
        __dependencies_check
        _process_1_args "${1}"
    elif [[ ${__args_num} -eq 2 ]]; then
        # check whether we have everything to start with govready
        __dependencies_check
        _process_2_args "${1}" "${2}"
    elif [[ ${__args_num} -eq 3 ]] || [[ ${__args_num} -eq 4 ]]; then
        # check whether we have everything to start with govready
        __dependencies_check
        _process_3_args "${1}" "${2}" "${3}" "${4:-}"
    else
        # wrong number of arguments
        _usage
        exit 1
    fi
}


## template files ##
#@action
_govready_init_ruleidresult_file() {

    __log_info "Creating .govready/xml/ruleidresult.xsl file"

    # Important to include `!` to avoid sending a halt program signal
    ! read -d '' SIF <<"EOF"
<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="1.1"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:cdf="http://checklists.nist.gov/xccdf/1.1"
    xmlns:exsl="http://exslt.org/common"
    xmlns:db="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:s="http://open-scap.org/"
    exclude-result-prefixes="xsl cdf db s exsl"
    xmlns:ovalres="http://oval.mitre.org/XMLSchema/oval-results-5"
    xmlns:sceres="http://open-scap.org/page/SCE_result_file"
    >

<!--
****************************************************************************************

Copyright: Greg Elin, 2014

This file provides a relitvely simple xslt transformation on openscap results.xml file
to show information regarding a single rule.

usage: $> xsltproc - -stringparam paramname paramvalue ruleidresult.xsl result-file-name.xml

-->

<xsl:param name="ruleid">notdefined</xsl:param>
<xsl:param name="compare_result">notdefined</xsl:param>
<xsl:strip-space elements="*"/>
<xsl:output method="text" encoding="utf-8" />

<xsl:template match="/">
    <xsl:apply-templates/>
</xsl:template>

<xsl:template match="cdf:rule-result">
<xsl:if test="@idref=$ruleid">
    <xsl:value-of select='cdf:result'/>
<xsl:text>
</xsl:text>
</xsl:if>
</xsl:template>

<!-- include to stop leakage from builtin tempaltes -->
<xsl:template match='node()' mode='engine-results'/>
<xsl:template match="text()"/>

</xsl:stylesheet>

EOF

    echo "$SIF" > .govready/xml/ruleidresult.xsl

}

#@action
_govready_init_filterresults_file() {

    __log_info "Creating .govready/xml/filterresults.xsl file"

    # Important to include `!` to avoid sending a halt program signal
    ! read -d '' SIF <<"EOF"
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:cdf="http://checklists.nist.gov/xccdf/1.1"
    xmlns:exsl="http://exslt.org/common"
    xmlns:db="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:s="http://open-scap.org/"
    exclude-result-prefixes="xsl cdf db s exsl"
    xmlns:ovalres="http://oval.mitre.org/XMLSchema/oval-results-5"
    xmlns:sceres="http://open-scap.org/page/SCE_result_file"
    >

<!--
****************************************************************************************

Copyright: Greg Elin, 2014

This style sheet lists all failed rules

usage: $> xsltproc - -stringparam paramname paramvalue filterresults.xsl result-file-name.xml
examples
    Which rules pass in most recent scan?
       xsltproc - -stringparam result pass filterresults.xsl scans/results.xml

    Which rules fail in most recent scan?
       xsltproc - -stringparam result fail filterresults.xsl scans/results.xml

    Compare all results that are other than "notselected" 
       xsltproc filterresults.xsl scans/results.xml

-->

<xsl:param name="result">notdefined</xsl:param>
<xsl:strip-space elements="*"/>
<xsl:output method="text" encoding="UTF-8" />

<xsl:template match="/">
    <xsl:apply-templates/>
</xsl:template>

<xsl:template match="/">
<xsl:choose>
  <xsl:when test="$result = 'notdefined'">
    <xsl:for-each select='cdf:Benchmark/cdf:TestResult/cdf:rule-result[cdf:result != "notselected"]'>
      <xsl:value-of select="@idref"/>
    <xsl:text>
</xsl:text>
   </xsl:for-each>
  </xsl:when>
  <xsl:otherwise>
    <xsl:for-each select='cdf:Benchmark/cdf:TestResult/cdf:rule-result[cdf:result = $result]'>
      <xsl:value-of select="@idref"/>
    <xsl:text>
</xsl:text>
    </xsl:for-each>
  </xsl:otherwise>
</xsl:choose>

</xsl:template>
<!-- include to stop leakage from builtin tempaltes -->
<xsl:template match='node()' mode='engine-results'/>
<xsl:template match="text()"/>

</xsl:stylesheet>


EOF

    echo "$SIF" > .govready/xml/filterresults.xsl

}


## MAIN ##
# signals and errors handler
trap _clean_up SIGHUP SIGINT SIGTERM ERR
trap _on_exit EXIT
_main "${@}"


